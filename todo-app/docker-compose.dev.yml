services:
  app:
    image: todo-frontend
    build:
      context: ./todo-frontend/
      dockerfile: dev.Dockerfile
    volumes:
      - ./todo-frontend/:/usr/src/app
    container_name: dev-todo-frontend
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:8080/api
  server:
    image: todo-backend
    build:
      context: ./todo-backend/
      dockerfile: dev.Dockerfile
    volumes:
      - ./todo-backend/:/usr/src/app
    container_name: dev-todo-backend
    environment:
      - MONGO_URL=mongodb://the_username:the_password@mongo:27017/the_database
      - REDIS_URL=redis://redis:6379
  mongo:
    image: mongo
    ports:
      - 3456:27017 # you can specify the port number on the host, e.g., - 3003:27017 (27017 is the default port for mongo)
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database
    volumes: ## use a bind-mount to mount the file mongo-init.js to the container. The formula is: FILE-IN-HOST:FILE-IN-CONTAINER. The location of the mongo-init.js in the container side can be found from the docker hub for mongo: https://hub.docker.com/_/mongo
      - ./todo-backend/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      - ./todo-backend/mongo_data:/data/db # The volume: /my/own/datadir:/data/db part of the command mounts the /my/own/datadir directory from the underlying host system as /data/db inside the container, where MongoDB by default will write its data files.
  redis:
    image: redis
    ports:
      - 6379:6379
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - ./todo-backend/redis_data:/data
  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.dev.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 8080:80
    container_name: reverse_proxy
    depends_on:
      - app
      - server
